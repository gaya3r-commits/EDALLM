question,answer
"Write a Verilog ALU module for 4-bit inputs that supports ADD, SUB, MUL, AND, and OR operations.","module ALU_4bit(
    input [3:0] A,
    input [3:0] B,
    input [2:0] ALU_Sel,
    output reg [7:0] ALU_Out
);
    always @(*) begin
        case (ALU_Sel)
            3'b000: ALU_Out = A + B;
            3'b001: ALU_Out = A - B;
            3'b010: ALU_Out = A * B;
            3'b011: ALU_Out = A & B;
            3'b100: ALU_Out = A | B;
            default: ALU_Out = 8'b0;
        endcase
    end
endmodule"
"Design an 8-bit ALU in Verilog with ADD, SUB, MUL, AND, OR, XOR, and shift left operations.","module ALU_8bit(
    input [7:0] A,
    input [7:0] B,
    input [2:0] ALU_Sel,
    output reg [15:0] ALU_Out
);
    always @(*) begin
        case (ALU_Sel)
            3'b000: ALU_Out = A + B;
            3'b001: ALU_Out = A - B;
            3'b010: ALU_Out = A * B;
            3'b011: ALU_Out = A & B;
            3'b100: ALU_Out = A | B;
            3'b101: ALU_Out = A ^ B;
            3'b110: ALU_Out = A << 1;
            default: ALU_Out = 16'b0;
        endcase
    end
endmodule"
"Implement a 16-bit ALU that performs ADD, SUB, MUL, AND, OR, XOR, SLT, and right shift operations.","module ALU_16bit(
    input [15:0] A,
    input [15:0] B,
    input [3:0] ALU_Sel,
    output reg [31:0] ALU_Out
);
    always @(*) begin
        case (ALU_Sel)
            4'b0000: ALU_Out = A + B;
            4'b0001: ALU_Out = A - B;
            4'b0010: ALU_Out = A * B;
            4'b0011: ALU_Out = A & B;
            4'b0100: ALU_Out = A | B;
            4'b0101: ALU_Out = A ^ B;
            4'b0110: ALU_Out = (A < B) ? 32'd1 : 32'd0;
            4'b0111: ALU_Out = A >> 1;
            default: ALU_Out = 32'd0;
        endcase
    end
endmodule"
Create a 32-bit ALU that includes all basic arithmetic and logic operations including multiplication.,"module ALU_32bit(
    input [31:0] A,
    input [31:0] B,
    input [3:0] ALU_Sel,
    output reg [63:0] ALU_Out
);
    always @(*) begin
        case (ALU_Sel)
            4'b0000: ALU_Out = A + B;
            4'b0001: ALU_Out = A - B;
            4'b0010: ALU_Out = A * B;
            4'b0011: ALU_Out = A & B;
            4'b0100: ALU_Out = A | B;
            4'b0101: ALU_Out = A ^ B;
            4'b0110: ALU_Out = (A < B) ? 64'd1 : 64'd0;
            4'b0111: ALU_Out = A << 2;
            4'b1000: ALU_Out = A >> 2;
            default: ALU_Out = 64'd0;
        endcase
    end
endmodule"
"What is the purpose of using multipliers in ALUs, and how do you handle output width?","Multiplication is used for arithmetic-intensive applications. The output width is usually doubled to avoid overflow: e.g., 8-bit × 8-bit = 16-bit output."
Why do we extend the output width for ALUs when using multiplication?,"Multiplication increases bit-width exponentially. For `N-bit` operands, the product is `2N-bit` wide to accommodate maximum value (e.g., 8×8 = 16 bits, 16×16 = 32 bits)."
